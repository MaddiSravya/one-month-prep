/* min and max sum*/
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        long sum = 0;
        long max = Long.MIN_VALUE;
        long min = Long.MAX_VALUE;
        for (int i = 0; i < 5; i++){
            long n = in.nextLong();
            sum += n;
            max = Math.max(max, n);
            min = Math.min(min, n);
        }
        System.out.println((sum - max) + " " + (sum - min));
    }
}
/*plus minus*/

public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int pos = 0;
        int zero = 0;
        int neg = 0;
        for (int i = 0; i < n; i++) {
            int x = in.nextInt();
            if (x > 0) {
                pos++;
            } else if (x == 0) {
                zero++;
            } else {
                neg++;
            }
        }
        System.out.println(pos / (double) n);
        System.out.println(neg / (double) n);
        System.out.println(zero / (double) n);
    }
}

/*Diagonal differences*/
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        int n;
        Scanner in=new Scanner(System.in);
        n=in.nextInt();
        int a[][]=new int[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                a[i][j]=in.nextInt();
            }
        }
        int pd=0,npd=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(j==i)
                    pd=pd+a[i][j];
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(i==n-j-1){
                    npd=npd+a[i][j];
                }
            }
        }
        int dif=npd-pd;
        dif=Math.abs(dif);
        System.out.println(dif);
    }
}
/* sparse arrays*/
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;


public class Solution {

    public static void main(String[] args) throws IOException {
        BufferedReader c = new BufferedReader(new InputStreamReader(System.in));
        Integer numstr = Integer.parseInt(c.readLine());
        HashMap<String,Integer> map = new HashMap<String,Integer>();
        while(numstr > 0)
            {
            String str = c.readLine();
            if (map.get(str)==null)
                map.put(str, 1);
            else
              {
                int num = map.get(str);
                map.put(str, num+1);
            }  
            numstr--;
        }  
        Integer numops = Integer.parseInt(c.readLine());
        while(numops > 0)
            {
            String s = c.readLine();
            if (map.get(s) == null)
                System.out.println(0);
            else
                System.out.println(map.get(s));
            numops--;
        }
    }
}
/*Lonely integer*/
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

import java.io.*;
import java.util.*;

class solution {

  public static void main(String[] args){
    Scanner sc = new Scanner(System.in);
    
    
    int n = sc.nextInt();
    int[] arr = new int[n];
    int i, j;
    int x = 0;
    boolean state;
    
    
    for (i = 0; i < n; i++) {
      arr[i] = sc.nextInt();
    }
    
    
    for (i = 0; i < n; i++) {
      state = true;
      for (j = 0; j < i; j++) {
        if (arr[i] == arr[j]) {
          j = i; 
          state = false;
        }
      }
      if (state == true) {
        for (j = i+1; j < n; j++) {
          if (arr[i] == arr[j]) {
            j = n; 
            state = false;
          }
        }
        if (state == true) {
          x = i;        
          i = n;         
        }
      }
    }
    
    
    System.out.println(arr[x]);
  }
}
/*flipping bits*/
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;



    /*
     * Complete the 'flippingBits' function below.
     *
     * The function is expected to return a LONG_INTEGER.
     * The functclass Result {ion accepts LONG_INTEGER n as parameter.
     */

public class Solution {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        long a = (1L << 32) - 1;
        
        for (int i = 0; i < n; i++) {
            long m = sc.nextLong();
            System.out.println(m ^ a);            
        }
        
        sc.close();

    }

}
/*counting sort1*/
mport java.io.*;
import java.math.*;
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    
    static void printArray(int[] ar) {
        for (int n : ar) {
            System.out.print(n + " ");
        }
        System.out.println("");
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[100];
        for (int i = 0; i < n; i++) {
            arr[sc.nextInt()]++;
        }
        
        printArray(arr);
    }

}

/*pangrams*/
import java.io.*;
import java.util.*;

public class Solution {
    public static boolean isPangram(String s) {
        boolean[] isInside = new boolean[26];
        for (char c : s.toCharArray()) {
            if (Character.isLetter(c)) {
                isInside[Character.toLowerCase(c)-'a'] = true;
            }
        }
        for (boolean b : isInside) {
            if (!b) return false;
        }
        return true;
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        if (isPangram(s)) System.out.println("pangram");
        else System.out.println("not pangram");
    }
}



    








